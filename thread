void multiplyThreadBlock (int *a, int *b, int *c, int n)
{
  int i, io, j, jo, k, ko, count, pid;
  for (i = 0; i < n; i++)
  {
    for (j = 0; j < n; j++)
    {
      c[i*n+j] = 0;
    }
  }
  
  for(io = 0; io < n; io+=blocksize)
  {
    for (jo = 0; jo < n; jo+=blocksize)
    {
      for (ko = 0; ko < n; ko +=blocksize)
      {
        count++; //counts number of children
        pid = fork();
        if (pid < 0)
        {
          printf("Failed\n");
          exit(1);
        }
        else if (pid > 0)
        {
          printf("Parent process is %d\n", pid);
        }
        else
        {
          for (i = io; i < MIN(io+blocksize, n); i++)
          {
            for (j = jo; j < MIN(io+blocksize,n); j++)
            {
              for (k = ko; k < MIN(ko+blocksize,n);k++)
              {
                sem_wait(&(semarray[i*n+j]));
                c[i*n+j] = c[i*n+j] + a[i*n+k]*b[k*n+j];
                sem_post(&(semarray[i*n+j]));
              }
            }
          }
        }
        exit(0);
      }
    }
  }
}
